set CLUSTER_BOT_KUBECONFIG {{ .chezmoi.homeDir }}/Temporary/cluster-bot-kubeconfig
set CLUSTER_BOT_EXTRACTED_PAYLOAD {{ .chezmoi.homeDir }}/Temporary/cluster-bot-payload

set -gx REGISTRY_AUTH_PREFERENCE podman
set -gx CONTAINER_ENGINE podman

function asjira
  open https://issues.redhat.com/browse/(basename (pwd))
end

function workon
  set -l item $argv[1]
  set -f workdir $HOME/Projects/Workspaces/$item
  mkdir -p $workdir
  cd $workdir
  if test -f $workdir/helpers.fish
    gum style --foreground='#2E2' --bold "Sourcing helpers.fish"
    source $workdir/helpers.fish
  end

  set -f notes $workdir/notes.md

  if ! test -f $notes
    echo "# Useful Links" > $notes
    echo "" >> $notes
    echo "# TODOs" >> $notes
    echo "" >> $notes
    echo "- [ ] TODO" >> $notes
    echo "" >> $notes
    echo "# Journal" >> $notes
    echo "" >> $notes
    echo "## "(date '+%B %d, %Y') >> $notes
  end

  gum style --foreground='#2E2' --bold "Showing notes.md"
  glow $notes --width 120

  function fish_title --inherit-variable=item
    echo $item
  end
end

function prepare-local-cvo
  echo '== Preparing $KUBECONFIG and ' $CLUSTER_BOT_KUBECONFIG
  set -f kubeconfig $argv[1]
  mv $kubeconfig /tmp/
  rm -f $CLUSTER_BOT_KUBECONFIG
  ln -s /tmp/(basename $kubeconfig) $CLUSTER_BOT_KUBECONFIG
  set -gx KUBECONFIG $CLUSTER_BOT_KUBECONFIG
  echo '== Testing $KUBECONFIG via `oc whoami`'
  oc whoami
  echo '== Obtaining and extracting release payload image to' $CLUSTER_BOT_EXTRACTED_PAYLOAD
  set -f rpimage (oc get -n openshift-cluster-version clusterversion version -o jsonpath='{.status.desired.image}')
  echo "Release payload image:   $rpimage"
  echo "Release payload version:" (oc get -n openshift-cluster-version clusterversion version -o jsonpath='{.status.desired.version}')
  rm -f $CLUSTER_BOT_EXTRACTED_PAYLOAD
  set -f rpimage_extracted (mktemp -d)
  oc image extract $rpimage --path /:$rpimage_extracted/
  ln -s $rpimage_extracted $CLUSTER_BOT_EXTRACTED_PAYLOAD
  echo '== Scaling down cluster CVO (or not)'
  if gum confirm "Scale down cluster CVO?"
    oc scale --replicas=0 -n openshift-cluster-version deployment cluster-version-operator
  end
  oc get deployments -n openshift-cluster-version
end

function hive
  oc --context hive $argv
end

function apici
  oc --context api.ci $argv
end

function appci
  oc --context app.ci $argv
end

function b01
  oc --context build01 $argv
end

function b02
  oc --context build02 $argv
end

function b03
  oc --context build03 $argv
end

function b04
  oc --context build04 $argv
end

function gp
  git push
end

function gpf
  git push --force
end

function c
  git commit
end

function ca
  git commit --amend
end

function k
  git kick
end

function ginu
  git in upstream
end

function pjw
  set PJ $argv[1]
  if [ -z $PJ ]
    echo "Needs a Prowjob ID"
    return
  end
  while [ -z $POD ]
     echo "Waiting for pod to be assigned for Prowjob"
     set POD (oc get pj $PJ -o jsonpath='{.status.pod_name}')
     sleep 5
  end
  echo "Pod: $POD"
  while ! oc logs $POD -c test -f
     echo "Waiting for pod to run"
     echo "Status: "(oc get pod $POD -o jsonpath={.status.phase})
     sleep 5
  end
end

source /usr/share/autojump/autojump.fish

set -gx GOPATH {{ .chezmoi.homeDir }}/Projects/RH/go
set -gx PATH $PATH $GOPATH/bin
set -gx PATH $PATH {{ .chezmoi.homeDir }}/.local/bin
fish_add_path {{ .chezmoi.homeDir }}/.cargo/bin
fish_add_path {{ .chezmoi.homeDir }}/Applications/bin
set -gx EDITOR vim

# The next line updates PATH for the Google Cloud SDK.
if [ -f "{{ .chezmoi.homeDir }}/Applications/google-cloud-sdk/path.fish.inc" ]
    source "{{ .chezmoi.homeDir }}/Applications/google-cloud-sdk/path.fish.inc"
end

alias grep="rg"
alias ls="lsd"

starship init fish | source
